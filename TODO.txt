TODO:

-More visualizations to better understand network progress:
	-Euclidean distance of current weight vector relative to initial vector
	-Save some diverse set of examples, and graph activation sparsity on the set by layer
	-Top N lowest and N highest cost examples from a large data set (graph expected vs. recevied rewards)
-Consider recording 'certainty' on some interval so it can be graphed vs. number of training steps or unique examples
-add computational time as Network attribute (to supplement 'age' and 'experience')
-(probably in chess_engine_plotter.R) create metric similar to 'average drop in validation cost per episode'
	-note that baseline starting v_cost is only computed for the first episode to avoid 'duplicate' x values

Eventually:

-allow the network freedom to parameterize its own training: namely at least having it
 compute some metric rating its competency, and weight the relative values of material to
 wins/losses accordingly.
